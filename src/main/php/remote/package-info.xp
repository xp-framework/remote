<?php
/* This file is part of the XP framework
 *
 * $Id$
 */

/**
 * Remote method invocation on Application Servers.
 *
 * EASC (Enterprise Application Server Connectivity)
 * =================================================
 * This is a binary protocol which is used for client/server communication.
 * The serialization format used is similar to that of PHP. The wire-format 
 * is designed for speed - the protocol overhead is commonly between one
 * and three milliseconds.
 *
 * ESDL (Enterprise Service Description Language)
 * ==============================================
 * Built on-top of the EASC protocol, this optional part provides functionality 
 * to remotely discover deployed functionality and to introspect its workings 
 * reflectively. This way, a programmer implementing a client for a business
 * object needs only know the server's and the beans' name and can generate
 * stub classes from that.
 *
 * Server implementations
 * ======================
 * The following application servers support EASC:
 * <ul>
 *   <li>JBoss (TM) Application Server - via MBean</li>
 *   <li>Peking - Application server written in the XP Framework</li>
 * </ul>
 *
 * The EASC protocol is also used for communication with the Lucene
 * Daemon to perform searches using the Apache Lucene search engine.
 *
 * Client implementations
 * ======================
 * There following client implementations of the EASC protocol exist:
 * <ul>
 *   <li>XP Framework - remote package</li>
 *   <li>Perl - EASC::Remote</li>
 *   <li>Microsoft (TM) .NET Framework - Net.XpFramework.EASC</li>
 * </ul>
 *
 * Example
 * =======
 * To use a bean deployed on an application server we use code along the
 * lines of the following:
 * <code>
 *   $facade= Remote::forName('xp://middleware.example.com:6448')
 *     ->lookup('corporate/customer/Facade/1.0')
 *     ->create()
 *   ;
 *   $customer= $facade->getByCustomerNumber(new Long(1861822));
 * </code>
 *
 * @see      http://news.xp-framework.net/category/11/EASC/
 * @purpose  Remote
 */
package remote {
}
